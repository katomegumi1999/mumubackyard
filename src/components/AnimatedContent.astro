---
// AnimatedContent.astro
---

<div class="animated-content">
  <slot />
</div>

<style>
  .animated-content {
    animation: fadeIn 1s ease-in-out;
  }
  
  h1 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
    background: linear-gradient(90deg, #3498db, #8e44ad);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    display: inline-block;
  }
  
  p, ul {
    margin-bottom: 1.5rem;
  }
  
  a {
    color: #3498db;
    text-decoration: none;
    transition: color 0.3s;
    position: relative;
  }
  
  a:hover {
    color: #8e44ad;
  }
  
  a:hover::after {
    content: '';
    position: absolute;
    width: 100%;
    height: 2px;
    bottom: -2px;
    left: 0;
    background: linear-gradient(90deg, #3498db, #8e44ad);
    animation: linkGlow 1.5s infinite;
  }
  
  @keyframes linkGlow {
    0%, 100% { opacity: 0.6; }
    50% { opacity: 1; }
  }
  
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  @media (max-width: 768px) {
    h1 {
      font-size: 2rem;
    }
  }
</style>

<script>
  // 添加滚动动画效果
  function animateOnScroll() {
    const elements = document.querySelectorAll('p, h1, ul');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const target = entry.target as HTMLElement;
          target.style.opacity = '1';
          target.style.transform = 'translateY(0)';
        }
      });
    }, { threshold: 0.1 });
    
    elements.forEach(element => {
      const el = element as HTMLElement;
      el.style.opacity = '0';
      el.style.transform = 'translateY(20px)';
      el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
      observer.observe(element);
    });
  }
  
  // 页面加载后初始化滚动动画
  document.addEventListener('DOMContentLoaded', animateOnScroll);
</script> 